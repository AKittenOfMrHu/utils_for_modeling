import numpy as np
import pandas as pd
import scipy.stats
import os

path = r'E:\my papers\writting for OT segmentation\seg metric\seg_metric_for_wen1'
info_name = 'all_metric_info.xlsx'

sheet_names = ['Dice', 'DSC', 'JC', 'HD95', 'Sens', 'PPV', 'ASSD']
cols = ['Ours', 'GGNet3D', 'DAF3D', '3D IFPN']
#cols.reverse()
for sheet_name in sheet_names:
    print(f'================= {sheet_name} ==================')
    info = pd.read_excel(os.path.join(path, info_name), sheet_name, engine='openpyxl')
    for key in cols:
        main_values = info.loc[:, cols[0]].to_numpy()
        values = info.loc[:, key].to_numpy()

        if sheet_name in ['HD95', 'ASSD']:
            _, p_value = scipy.stats.wilcoxon(main_values, values, alternative='less') if key != cols[0] else (1, 1)
            mean, std = scipy.stats.norm.fit(values)
            conf_intveral = scipy.stats.norm.interval(0.95, loc=mean, scale=std / np.sqrt(values.shape[0]))
            mean_ci = (conf_intveral[1] - conf_intveral[0]) / 2.
            print(f'{key} -- mean: {mean:.2f}; ci: {mean_ci:.2f} ')
            print(f'{key} -- p-value: {p_value:.4f}')
        else:
            _, p_value = scipy.stats.wilcoxon(main_values, values, alternative='greater') if key != cols[0] else (1, 1)
            mean, std = scipy.stats.norm.fit(values)
            conf_intveral = scipy.stats.norm.interval(0.95, loc=mean, scale=std / np.sqrt(values.shape[0]))
            mean_ci = (conf_intveral[1] - conf_intveral[0]) / 2.
            print(f'{key} -- mean: {mean*100:.2f}; ci: {mean_ci*100:.2f} ')
            print(f'{key} -- p-value: {p_value:.4f}')
